/**
 * DataRouterAgent - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ —Ä–æ–ª—è–º
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
 * 1. –ö–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª/–¥–∞–Ω–Ω—ã–µ
 * 2. Agent –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø (–º–µ–¥–∏–∞–ø–ª–∞–Ω/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ/–≤—ã–≥—Ä—É–∑–∫–∞/–∏ —Ç.–¥.)
 * 3. Agent –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏
 * 4. Agent —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∞–∑–µ –ø—Ä–æ–µ–∫—Ç–∞
 * 5. Agent —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–æ–ª—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
 * 
 * –ù–ï –ö–ê–°–¢–û–ú–ù–û–ï –†–ï–®–ï–ù–ò–ï - –°–õ–ï–î–û–í–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê–ú!
 */

import { LLMClient } from '../core/LLMClient';
import { MediaLandscapeService } from '../services/MediaLandscapeService';
import { VectorDBService } from '../services/VectorDBService';

// ==================== –¢–ò–ü–´ ====================

type DataType = 
  | 'media_plan'      // –ú–µ–¥–∏–∞–ø–ª–∞–Ω (Excel —Å –ø–ª–æ—â–∞–¥–∫–∞–º–∏ –∏ –±—é–¥–∂–µ—Ç–∞–º–∏)
  | 'research'        // –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (PDF/DOCX)
  | 'export'          // –í—ã–≥—Ä—É–∑–∫–∞ –∏–∑ —Å–∏—Å—Ç–µ–º (CSV/JSON)
  | 'brief'           // –ë—Ä–∏—Ñ (PDF/DOCX/Email)
  | 'creative'        // –ö—Ä–µ–∞—Ç–∏–≤ (PNG/JPG/MP4)
  | 'report'          // –û—Ç—á–µ—Ç (PDF/DOCX)
  | 'unknown';        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø

type Role = 
  | 'Specialist'
  | 'Strategist'
  | 'Analyst'
  | 'Account_Manager'
  | 'Creative'
  | 'Project_Manager';

interface DetectedData {
  type: DataType;
  confidence: number;
  metadata: Record<string, any>;
}

interface ProcessedData {
  type: DataType;
  role: Role;
  data: any;
  recommendations: string[];
  next_steps: string[];
}

// ==================== –ì–õ–ê–í–ù–´–ô –ê–ì–ï–ù–¢ ====================

export class DataRouterAgent {
  constructor(
    private llm: LLMClient,
    private mediaLandscape: MediaLandscapeService,
    private vectorDB: VectorDBService
  ) {}

  /**
   * –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
   */
  async processClientInput(input: File | string): Promise<ProcessedData> {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...');
    
    // –®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    const detected = await this.detectDataType(input);
    console.log(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∏–ø: ${detected.type} (confidence: ${detected.confidence})`);
    
    // –®–ê–ì 2: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ä–æ–ª–∏
    const targetRole = this.mapTypeToRole(detected.type);
    console.log(`üë§ –†–æ–ª—å-–≤–ª–∞–¥–µ–ª–µ—Ü: ${targetRole}`);
    
    // –®–ê–ì 3: –í—ã–±–æ—Ä –∏ –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    const processor = this.getProcessor(detected.type);
    const processedData = await processor.process(input, detected.metadata);
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: ${JSON.stringify(processedData).length} –±–∞–π—Ç`);
    
    // –®–ê–ì 4: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    const structured = await this.structureByProject(processedData, targetRole);
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
    
    // –®–ê–ì 5: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
    await this.notifyRole(targetRole, structured);
    console.log(`üìß –†–æ–ª—å ${targetRole} —É–≤–µ–¥–æ–º–ª–µ–Ω–∞`);
    
    // –®–ê–ì 6: AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = await this.generateRecommendations(structured, detected.type);
    console.log(`üí° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${recommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`);
    
    // –®–ê–ì 7: –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    const nextSteps = this.getNextSteps(detected.type, structured);
    
    return {
      type: detected.type,
      role: targetRole,
      data: structured,
      recommendations,
      next_steps
    };
  }

  /**
   * –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –î–ê–ù–ù–´–•
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ + AI –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private async detectDataType(input: File | string): Promise<DetectedData> {
    if (input instanceof File) {
      const ext = input.name.split('.').pop()?.toLowerCase();
      const content = await this.readFile(input);
      
      // EXCEL/CSV - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      if (['xlsx', 'xls', 'csv'].includes(ext || '')) {
        // –ú–µ–¥–∏–∞–ø–ª–∞–Ω?
        if (this.hasMediaPlanStructure(content)) {
          return {
            type: 'media_plan',
            confidence: 0.95,
            metadata: { 
              format: ext,
              rows: content.length,
              platforms_count: this.countUniquePlatforms(content)
            }
          };
        }
        
        // –í—ã–≥—Ä—É–∑–∫–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?
        if (this.hasExportStructure(content)) {
          const source = this.detectExportSource(content);
          return {
            type: 'export',
            confidence: 0.90,
            metadata: { 
              format: ext,
              source: source, // 'yandex_direct' | 'vk_ads' | etc
              campaigns_count: content.length
            }
          };
        }
      }
      
      // PDF/DOCX - AI –∞–Ω–∞–ª–∏–∑
      if (['pdf', 'docx', 'doc'].includes(ext || '')) {
        const text = await this.extractText(input);
        const classification = await this.classifyDocument(text);
        
        return {
          type: classification.type as DataType,
          confidence: classification.confidence,
          metadata: {
            format: ext,
            pages: classification.pages,
            language: 'ru'
          }
        };
      }
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ - –∫—Ä–µ–∞—Ç–∏–≤—ã
      if (['jpg', 'jpeg', 'png', 'gif', 'mp4', 'mov', 'avi'].includes(ext || '')) {
        return {
          type: 'creative',
          confidence: 1.0,
          metadata: {
            format: ext,
            mime_type: input.type,
            size: input.size
          }
        };
      }
    }
    
    // –¢–µ–∫—Å—Ç (email, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if (typeof input === 'string') {
      const classification = await this.classifyText(input);
      return {
        type: classification.type as DataType,
        confidence: classification.confidence,
        metadata: {
          length: input.length,
          source: 'text'
        }
      };
    }
    
    return {
      type: 'unknown',
      confidence: 0.0,
      metadata: {}
    };
  }

  /**
   * –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ú–ï–î–ò–ê–ü–õ–ê–ù–ê
   */
  private hasMediaPlanStructure(data: any[]): boolean {
    if (!Array.isArray(data) || data.length === 0) return false;
    
    const firstRow = data[0];
    const requiredColumns = [
      '–ø–ª–æ—â–∞–¥–∫–∞', 'platform', 'site',
      '–±—é–¥–∂–µ—Ç', 'budget',
      'cpm', '—Ü–µ–Ω–∞'
    ];
    
    const keys = Object.keys(firstRow).map(k => k.toLowerCase());
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 2 –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const matches = requiredColumns.filter(col => 
      keys.some(k => k.includes(col))
    );
    
    return matches.length >= 2;
  }

  /**
   * –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –í–´–ì–†–£–ó–ö–ò
   */
  private hasExportStructure(data: any[]): boolean {
    if (!Array.isArray(data) || data.length === 0) return false;
    
    const firstRow = data[0];
    const exportColumns = [
      '–ø–æ–∫–∞–∑—ã', 'impressions',
      '–∫–ª–∏–∫–∏', 'clicks',
      '—Ä–∞—Å—Ö–æ–¥', 'cost', 'spend',
      '–¥–∞—Ç–∞', 'date'
    ];
    
    const keys = Object.keys(firstRow).map(k => k.toLowerCase());
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 3 –∏–∑ –º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    const matches = exportColumns.filter(col => 
      keys.some(k => k.includes(col))
    );
    
    return matches.length >= 3;
  }

  /**
   * –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–ê –í–´–ì–†–£–ó–ö–ò
   */
  private detectExportSource(data: any[]): string {
    const firstRow = data[0];
    const keys = Object.keys(firstRow).map(k => k.toLowerCase());
    
    if (keys.some(k => k.includes('id –∫–∞–º–ø–∞–Ω–∏–∏'))) return 'yandex_direct';
    if (keys.some(k => k.includes('account_id'))) return 'vk_ads';
    if (keys.some(k => k.includes('campaign_id') && k.includes('google'))) return 'google_ads';
    
    return 'unknown';
  }

  /**
   * AI –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê
   */
  private async classifyDocument(text: string) {
    const prompt = `
–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:

–¢–∏–ø—ã:
- "brief" - –±—Ä–∏—Ñ –∫–ª–∏–µ–Ω—Ç–∞ (—Ü–µ–ª–∏, –∑–∞–¥–∞—á–∏, –±—é–¥–∂–µ—Ç, —Å—Ä–æ–∫–∏)
- "research" - –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ (–∞–Ω–∞–ª–∏–∑, –∏–Ω—Å–∞–π—Ç—ã, –¥–∞–Ω–Ω—ã–µ)
- "report" - –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ (–º–µ—Ç—Ä–∏–∫–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)

–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:
${text.substring(0, 2000)}

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "type": "brief" | "research" | "report",
  "confidence": 0.0-1.0,
  "pages": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü,
  "reason": "–ø–æ—á–µ–º—É —ç—Ç–æ—Ç —Ç–∏–ø"
}
`;

    const response = await this.llm.generate(prompt, { format: 'json' });
    return JSON.parse(response);
  }

  /**
   * AI –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê
   */
  private async classifyText(text: string) {
    const prompt = `
–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:

–¢–∏–ø—ã:
- "brief" - –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –±—Ä–∏—Ñ
- "question" - –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
- "request" - –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ
- "feedback" - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

–¢–µ–∫—Å—Ç:
${text}

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "type": "brief" | "question" | "request" | "feedback",
  "confidence": 0.0-1.0,
  "reason": "–ø–æ—á–µ–º—É"
}
`;

    const response = await this.llm.generate(prompt, { format: 'json' });
    return JSON.parse(response);
  }

  /**
   * –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø –¢–ò–ü ‚Üí –†–û–õ–¨
   */
  private mapTypeToRole(type: DataType): Role {
    const mapping: Record<DataType, Role> = {
      'media_plan': 'Specialist',
      'research': 'Strategist',
      'export': 'Analyst',
      'brief': 'Account_Manager',
      'creative': 'Creative',
      'report': 'Analyst',
      'unknown': 'Project_Manager'
    };
    
    return mapping[type];
  }

  /**
   * –ü–û–õ–£–ß–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –î–õ–Ø –¢–ò–ü–ê
   */
  private getProcessor(type: DataType): DataProcessor {
    const processors = {
      'media_plan': new MediaPlanProcessor(this.llm, this.mediaLandscape),
      'research': new ResearchProcessor(this.llm, this.vectorDB),
      'export': new ExportProcessor(this.llm),
      'brief': new BriefProcessor(this.llm),
      'creative': new CreativeProcessor(this.llm),
      'report': new ReportProcessor(this.llm)
    };
    
    return processors[type] || new GenericProcessor(this.llm);
  }

  /**
   * –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ò–ï –ü–û –ü–†–û–ï–ö–¢–£
   */
  private async structureByProject(data: any, role: Role): Promise<any> {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    const paths = {
      'Specialist': 'Media_Plans/',
      'Strategist': 'Strategy/',
      'Analyst': 'Analytics/Raw_Data/',
      'Account_Manager': 'Brief/',
      'Creative': 'Creatives/',
      'Project_Manager': 'Misc/'
    };
    
    const savePath = paths[role];
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const structured = {
      id: this.generateId(),
      created_at: new Date().toISOString(),
      role: role,
      path: savePath,
      data: data
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –ø—Ä–æ–µ–∫—Ç–∞
    await this.saveToProjectDB(structured);
    
    return structured;
  }

  /**
   * –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –†–û–õ–ò
   */
  private async notifyRole(role: Role, data: any): Promise<void> {
    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–ª–∏: ${role}`);
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // Email, Slack, in-app notification –∏ —Ç.–¥.
    
    await this.sendNotification({
      recipient: role,
      type: 'new_data',
      data: {
        type: data.data.type || 'unknown',
        summary: this.generateSummary(data),
        path: data.path
      }
    });
  }

  /**
   * –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
   */
  private async generateRecommendations(data: any, type: DataType): Promise<string[]> {
    const prompt = `
–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ "${type}" –ø—Ä–µ–¥–ª–æ–∂–∏ 3-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç–µ.

–î–∞–Ω–Ω—ã–µ:
${JSON.stringify(data.data, null, 2).substring(0, 1000)}

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ actionable
- –°–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —Ä–æ–ª—å—é ${data.role}
- –£—á–∏—Ç—ã–≤–∞—é—â–∏–º–∏ –Ω–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã

–û—Ç–≤–µ—Ç –≤ JSON –º–∞—Å—Å–∏–≤–µ —Å—Ç—Ä–æ–∫:
["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2", ...]
`;

    const response = await this.llm.generate(prompt, { format: 'json' });
    return JSON.parse(response);
  }

  /**
   * –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò
   */
  private getNextSteps(type: DataType, data: any): string[] {
    const steps: Record<DataType, string[]> = {
      'media_plan': [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–ª–æ—â–∞–¥–æ–∫ —Å –º–µ–¥–∏–∞–ª–∞–Ω–¥—à–∞—Ñ—Ç–æ–º',
        '–°—Ä–∞–≤–Ω–∏—Ç—å CPM —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏',
        '–£—Ç–æ—á–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Å –ø–ª–æ—â–∞–¥–∫–∞–º–∏',
        '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å 05_Campaign_Preparation'
      ],
      'research': [
        'Review –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Strategist-–æ–º',
        '–ò–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
        '–î–æ–±–∞–≤–∏—Ç—å –≤ knowledge base',
        '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –±—Ä–∏—Ñ–∏–Ω–≥–µ'
      ],
      'export': [
        '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (CTR, CPA, ROI)',
        '–°—Ä–∞–≤–Ω–∏—Ç—å —Å —Ü–µ–ª–µ–≤—ã–º–∏ KPI',
        '–í—ã—è–≤–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è',
        '–°–æ–∑–¥–∞—Ç—å dashboard –∏ –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞'
      ],
      'brief': [
        '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å 01_Briefing',
        '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç',
        'AI —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é',
        '–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–ª–æ—â–∞–¥–∫–∏ –∏–∑ –º–µ–¥–∏–∞–ª–∞–Ω–¥—à–∞—Ñ—Ç–∞'
      ],
      'creative': [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å compliance',
        '–î–æ–±–∞–≤–∏—Ç—å –∫ –∫–∞–º–ø–∞–Ω–∏–∏',
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏'
      ],
      'report': [
        'Review –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º',
        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É',
        '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥—ã'
      ],
      'unknown': [
        '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è',
        '–°–≤—è–∑–∞—Ç—å—Å—è —Å Project Manager'
      ]
    };
    
    return steps[type] || [];
  }

  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

  private async readFile(file: File): Promise<any[]> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (Excel/CSV/JSON)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    return [];
  }

  private async extractText(file: File): Promise<string> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (PDF/DOCX)
    return '';
  }

  private countUniquePlatforms(data: any[]): number {
    const platforms = new Set(
      data.map(row => row['–ø–ª–æ—â–∞–¥–∫–∞'] || row['platform'] || row['site'])
    );
    return platforms.size;
  }

  private generateId(): string {
    return `data_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateSummary(data: any): string {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    return `–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ ${data.data.type}`;
  }

  private async saveToProjectDB(data: any): Promise<void> {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –ø—Ä–æ–µ–∫—Ç–∞
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${data.path}${data.id}.json`);
  }

  private async sendNotification(notification: any): Promise<void> {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${JSON.stringify(notification)}`);
  }
}

// ==================== –ò–ù–¢–ï–†–§–ï–ô–° –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ====================

abstract class DataProcessor {
  constructor(protected llm: LLMClient) {}
  
  abstract process(input: File | string, metadata: any): Promise<any>;
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ú–ï–î–ò–ê–ü–õ–ê–ù–û–í ====================

class MediaPlanProcessor extends DataProcessor {
  constructor(
    llm: LLMClient,
    private mediaLandscape: MediaLandscapeService
  ) {
    super(llm);
  }

  async process(input: File, metadata: any): Promise<any> {
    console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞...');
    
    // 1. –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
    const data = await this.parseMediaPlan(input);
    
    // 2. –û–±–æ–≥–∞—Ç–∏—Ç—å –∏–∑ –º–µ–¥–∏–∞–ª–∞–Ω–¥—à–∞—Ñ—Ç–∞
    for (const line of data.lines) {
      const platform = await this.mediaLandscape.findPlatform(line.platform);
      
      if (platform) {
        line.benchmark_cpm = platform.source_data.cpm;
        line.min_budget = platform.source_data.min_budget;
        line.contact = platform.source_data.contacts?.email;
        line.deviation = this.calculateDeviation(line.cpm, line.benchmark_cpm);
      }
    }
    
    // 3. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    data.total_budget = data.lines.reduce((sum, l) => sum + l.budget, 0);
    data.platforms_count = new Set(data.lines.map(l => l.platform)).size;
    data.avg_cpm = data.lines.reduce((sum, l) => sum + l.cpm, 0) / data.lines.length;
    
    return {
      type: 'media_plan',
      source_file: input.name,
      ...data
    };
  }

  private async parseMediaPlan(file: File): Promise<any> {
    // –ü–∞—Ä—Å–∏–Ω–≥ Excel/CSV
    return {
      lines: []
    };
  }

  private calculateDeviation(actual: number, benchmark: number): number {
    return ((actual - benchmark) / benchmark) * 100;
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ô ====================

class ResearchProcessor extends DataProcessor {
  constructor(
    llm: LLMClient,
    private vectorDB: VectorDBService
  ) {
    super(llm);
  }

  async process(input: File, metadata: any): Promise<any> {
    console.log('üî¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...');
    
    // 1. –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç
    const text = await this.extractText(input);
    
    // 2. AI –∞–Ω–∞–ª–∏–∑
    const analysis = await this.analyzeResearch(text);
    
    // 3. –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ Vector DB
    await this.vectorDB.addDocument({
      id: this.generateId(),
      content: analysis.summary,
      metadata: {
        type: 'research',
        industry: analysis.industry,
        date: new Date().toISOString()
      }
    });
    
    return {
      type: 'research',
      source_file: input.name,
      ...analysis
    };
  }

  private async extractText(file: File): Promise<string> {
    // OCR / –ø–∞—Ä—Å–∏–Ω–≥ PDF
    return '';
  }

  private async analyzeResearch(text: string): Promise<any> {
    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∏:

1. –¢–∏–ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (market/competitor/audience)
2. –ò–Ω–¥—É—Å—Ç—Ä–∏—è
3. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
4. –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
5. –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã (5-10)
6. –¶–∏—Ñ—Ä—ã –∏ –º–µ—Ç—Ä–∏–∫–∏
7. –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

–¢–µ–∫—Å—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
${text.substring(0, 3000)}

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "type": "market" | "competitor" | "audience",
  "industry": "–∏–Ω–¥—É—Å—Ç—Ä–∏—è",
  "geography": "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è",
  "period": "–ø–µ—Ä–∏–æ–¥",
  "insights": ["–∏–Ω—Å–∞–π—Ç 1", "–∏–Ω—Å–∞–π—Ç 2", ...],
  "metrics": {"–º–µ—Ç—Ä–∏–∫–∞": –∑–Ω–∞—á–µ–Ω–∏–µ},
  "summary": "–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ"
}
`;

    const response = await this.llm.generate(prompt, { format: 'json' });
    return JSON.parse(response);
  }

  private generateId(): string {
    return `research_${Date.now()}`;
  }
}

// ==================== –î–†–£–ì–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

class ExportProcessor extends DataProcessor {
  async process(input: File, metadata: any): Promise<any> {
    console.log('üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏...');
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
    return { type: 'export' };
  }
}

class BriefProcessor extends DataProcessor {
  async process(input: File | string, metadata: any): Promise<any> {
    console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∏—Ñ–∞...');
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
    return { type: 'brief' };
  }
}

class CreativeProcessor extends DataProcessor {
  async process(input: File, metadata: any): Promise<any> {
    console.log('üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞...');
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
    return { type: 'creative' };
  }
}

class ReportProcessor extends DataProcessor {
  async process(input: File, metadata: any): Promise<any> {
    console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞...');
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
    return { type: 'report' };
  }
}

class GenericProcessor extends DataProcessor {
  async process(input: any, metadata: any): Promise<any> {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞...');
    return { type: 'unknown' };
  }
}

