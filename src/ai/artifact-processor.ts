/**
 * AI-–∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
 * - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
 */

import type { BriefData, MediaPlanData, StrategyData } from '../types/artifacts.types';

// –¢–∏–ø—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
export type ArtifactType = 
  | 'brief'              // –ë—Ä–∏—Ñ –∫–ª–∏–µ–Ω—Ç–∞
  | 'media_plan'         // –ú–µ–¥–∏–∞–ø–ª–∞–Ω
  | 'strategy'           // –°—Ç—Ä–∞—Ç–µ–≥–∏—è
  | 'report'             // –û—Ç—á–µ—Ç
  | 'utm_rules'          // –ü—Ä–∞–≤–∏–ª–∞ UTM
  | 'campaign_setup'     // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π
  | 'team'               // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
  | 'budget'             // –ë—é–¥–∂–µ—Ç
  | 'creative_brief'     // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –±—Ä–∏—Ñ
  | 'competitor_analysis'// –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  | 'unknown';           // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø

// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
export interface ProcessingResult {
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  file_name: string;
  file_type: string;
  processing_time_ms: number;
  
  // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
  artifact_type: ArtifactType;
  confidence: number;  // 0-1, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  data: BriefData | MediaPlanData | StrategyData | any;
  
  // –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
  completeness: number;  // 0-100, –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
  missing_fields: string[];
  validation_errors: string[];
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  insights: string[];
  recommendations: string[];
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
export interface ExcelData {
  sheets: Array<{
    name: string;
    rows: any[][];
    rowCount: number;
    columnCount: number;
  }>;
}

/**
 * AI-–∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 */
export class ArtifactProcessor {
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
   */
  async processFile(filePath: string): Promise<ProcessingResult> {
    const startTime = Date.now();
    const fileName = filePath.split('/').pop() || filePath;
    
    console.log(`\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${fileName}`);
    
    try {
      // –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
      const parsedData = await this.parseFile(filePath);
      
      // –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
      const classification = await this.classifyArtifact(fileName, parsedData);
      
      // –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∏–ø–æ–º
      const extractedData = await this.extractData(
        classification.artifact_type,
        parsedData
      );
      
      // –®–∞–≥ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
      const validation = this.validateData(
        classification.artifact_type,
        extractedData
      );
      
      // –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
      const insights = this.generateInsights(
        classification.artifact_type,
        extractedData,
        validation
      );
      
      const processingTime = Date.now() - startTime;
      
      const result: ProcessingResult = {
        file_name: fileName,
        file_type: this.getFileType(fileName),
        processing_time_ms: processingTime,
        artifact_type: classification.artifact_type,
        confidence: classification.confidence,
        data: extractedData,
        completeness: validation.completeness,
        missing_fields: validation.missing_fields,
        validation_errors: validation.errors,
        insights: insights.insights,
        recommendations: insights.recommendations,
      };
      
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${fileName}:`, error);
      
      return {
        file_name: fileName,
        file_type: this.getFileType(fileName),
        processing_time_ms: Date.now() - startTime,
        artifact_type: 'unknown',
        confidence: 0,
        data: {},
        completeness: 0,
        missing_fields: [],
        validation_errors: [`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error}`],
        insights: [],
        recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'],
      };
    }
  }
  
  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ (—Å–∏–º—É–ª—è—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel)
   */
  private async parseFile(filePath: string): Promise<ExcelData> {
    const fileName = filePath.split('/').pop()?.toLowerCase() || '';
    
    // –°–∏–º—É–ª—è—Ü–∏—è: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è Excel
    
    if (fileName.includes('–º–µ–¥–∏–∞–ø–ª–∞–Ω') || fileName.includes('–º–ø')) {
      return {
        sheets: [{
          name: '–ú–µ–¥–∏–∞–ø–ª–∞–Ω',
          rows: [
            ['–ö–∞–Ω–∞–ª', '–ë—é–¥–∂–µ—Ç', '–§–æ—Ä–º–∞—Ç—ã', '–ü–æ–∫–∞–∑—ã', '–ö–ª–∏–∫–∏'],
            ['–Ø–Ω–¥–µ–∫—Å –î–∏—Ä–µ–∫—Ç', 500000, '–ü–æ–∏—Å–∫, –†–°–Ø', 100000, 2500],
            ['VK –†–µ–∫–ª–∞–º–∞', 300000, '–õ–µ–Ω—Ç–∞, –ò—Å—Ç–æ—Ä–∏–∏', 150000, 4500],
            ['myTarget', 200000, '–ë–∞–Ω–Ω–µ—Ä—ã', 80000, 1600],
          ],
          rowCount: 4,
          columnCount: 5,
        }],
      };
    }
    
    if (fileName.includes('–±—Ä–∏—Ñ') || fileName.includes('–ø–∞—Å–ø–æ—Ä—Ç')) {
      return {
        sheets: [{
          name: '–ë—Ä–∏—Ñ',
          rows: [
            ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            ['–ö–ª–∏–µ–Ω—Ç', '–°–±–µ—Ä–±–∞–Ω–∫'],
            ['–¶–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏', '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç—ã'],
            ['–ë—é–¥–∂–µ—Ç', '15000000'],
            ['–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
            ['–ü–µ—Ä–∏–æ–¥', '01.11.2025 - 31.12.2025'],
          ],
          rowCount: 6,
          columnCount: 2,
        }],
      };
    }
    
    if (fileName.includes('–æ—Ç—á–µ—Ç') || fileName.includes('report')) {
      return {
        sheets: [{
          name: '–û—Ç—á–µ—Ç',
          rows: [
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ü–ª–∞–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'],
            ['–ü–æ–∫–∞–∑—ã', 1500000, 1200000, '+25%'],
            ['–ö–ª–∏–∫–∏', 45000, 40000, '+12.5%'],
            ['CTR', '3.0%', '3.3%', '-9%'],
            ['–†–∞—Å—Ö–æ–¥', '4500000', '5000000', '-10%'],
          ],
          rowCount: 5,
          columnCount: 4,
        }],
      };
    }
    
    // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    return {
      sheets: [{
        name: 'Sheet1',
        rows: [
          ['A1', 'B1', 'C1'],
          ['A2', 'B2', 'C2'],
        ],
        rowCount: 2,
        columnCount: 3,
      }],
    };
  }
  
  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
   */
  private async classifyArtifact(
    fileName: string,
    parsedData: ExcelData
  ): Promise<{ artifact_type: ArtifactType; confidence: number }> {
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞...');
    
    const lowerFileName = fileName.toLowerCase();
    
    // –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if (lowerFileName.includes('–º–µ–¥–∏–∞–ø–ª–∞–Ω') || 
        lowerFileName.includes('–º–ø') ||
        lowerFileName.includes('media') && lowerFileName.includes('plan')) {
      return { artifact_type: 'media_plan', confidence: 0.95 };
    }
    
    if (lowerFileName.includes('–±—Ä–∏—Ñ') || 
        lowerFileName.includes('brief') ||
        lowerFileName.includes('–ø–∞—Å–ø–æ—Ä—Ç')) {
      return { artifact_type: 'brief', confidence: 0.90 };
    }
    
    if (lowerFileName.includes('–æ—Ç—á–µ—Ç') || 
        lowerFileName.includes('report') ||
        lowerFileName.includes('daily') ||
        lowerFileName.includes('weekly')) {
      return { artifact_type: 'report', confidence: 0.92 };
    }
    
    if (lowerFileName.includes('—Å—Ç—Ä–∞—Ç–µ–≥') || 
        lowerFileName.includes('strategy')) {
      return { artifact_type: 'strategy', confidence: 0.88 };
    }
    
    if (lowerFileName.includes('utm')) {
      return { artifact_type: 'utm_rules', confidence: 0.93 };
    }
    
    if (lowerFileName.includes('–±—é–¥–∂–µ—Ç') || 
        lowerFileName.includes('budget')) {
      return { artifact_type: 'budget', confidence: 0.89 };
    }
    
    if (lowerFileName.includes('—Ä–µ–≥–ª–∞–º–µ–Ω—Ç') || 
        lowerFileName.includes('roadmap')) {
      return { artifact_type: 'campaign_setup', confidence: 0.85 };
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const firstSheet = parsedData.sheets[0];
    const headers = firstSheet.rows[0]?.map(h => String(h).toLowerCase()) || [];
    
    if (headers.some(h => h.includes('–∫–∞–Ω–∞–ª') || h.includes('–ø–ª–æ—â–∞–¥–∫–∞'))) {
      return { artifact_type: 'media_plan', confidence: 0.85 };
    }
    
    if (headers.some(h => h.includes('–ø–∞—Ä–∞–º–µ—Ç—Ä') && h.includes('–∑–Ω–∞—á–µ–Ω–∏–µ'))) {
      return { artifact_type: 'brief', confidence: 0.80 };
    }
    
    if (headers.some(h => h.includes('–º–µ—Ç—Ä–∏–∫–∞') || h.includes('—Ñ–∞–∫—Ç') || h.includes('–ø–ª–∞–Ω'))) {
      return { artifact_type: 'report', confidence: 0.82 };
    }
    
    return { artifact_type: 'unknown', confidence: 0.5 };
  }
  
  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
   */
  private async extractData(
    artifactType: ArtifactType,
    parsedData: ExcelData
  ): Promise<any> {
    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–ø–∞: ${artifactType}...`);
    
    switch (artifactType) {
      case 'media_plan':
        return this.extractMediaPlan(parsedData);
      case 'brief':
        return this.extractBrief(parsedData);
      case 'report':
        return this.extractReport(parsedData);
      case 'strategy':
        return this.extractStrategy(parsedData);
      default:
        return { raw_data: parsedData };
    }
  }
  
  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞
   */
  private extractMediaPlan(data: ExcelData): MediaPlanData {
    const sheet = data.sheets[0];
    const [headers, ...rows] = sheet.rows;
    
    const channels = rows.map(row => ({
      name: String(row[0] || ''),
      budget: Number(row[1] || 0),
      formats: row[2] ? String(row[2]).split(',').map(f => f.trim()) : [],
      kpis: {
        impressions: Number(row[3] || 0),
        clicks: Number(row[4] || 0),
      },
    }));
    
    return { channels };
  }
  
  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–∏—Ñ–∞
   */
  private extractBrief(data: ExcelData): BriefData {
    const sheet = data.sheets[0];
    const dataMap = new Map(
      sheet.rows.filter(row => row[0]).map(row => [String(row[0]), row[1]])
    );
    
    const budget = dataMap.get('–ë—é–¥–∂–µ—Ç');
    const geography = dataMap.get('–ì–µ–æ–≥—Ä–∞—Ñ–∏—è');
    const period = dataMap.get('–ü–µ—Ä–∏–æ–¥');
    
    return {
      client_name: String(dataMap.get('–ö–ª–∏–µ–Ω—Ç') || ''),
      campaign_objective: String(dataMap.get('–¶–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏') || ''),
      budget: {
        total: budget ? Number(budget) : undefined,
        currency: 'RUB',
      },
      geography: geography ? String(geography).split(',').map(g => g.trim()) : [],
      period: period ? this.parsePeriod(String(period)) : undefined,
      target_audience: {
        age: [25, 45],  // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        gender: 'all',
      },
      kpis: {},
    };
  }
  
  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞
   */
  private extractReport(data: ExcelData): any {
    const sheet = data.sheets[0];
    const [headers, ...rows] = sheet.rows;
    
    const metrics: Record<string, any> = {};
    rows.forEach(row => {
      const metricName = String(row[0] || '').toLowerCase();
      metrics[metricName] = {
        value: row[1],
        plan: row[2],
        deviation: row[3],
      };
    });
    
    return { metrics, summary: '–û—Ç—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω' };
  }
  
  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   */
  private extractStrategy(data: ExcelData): StrategyData {
    return {
      key_insights: ['–ò–Ω—Å–∞–π—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞'],
      recommendations: ['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞'],
    };
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private validateData(
    artifactType: ArtifactType,
    data: any
  ): { completeness: number; missing_fields: string[]; errors: string[] } {
    console.log('‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    
    const missing: string[] = [];
    const errors: string[] = [];
    
    if (artifactType === 'brief') {
      const brief = data as BriefData;
      if (!brief.client_name) missing.push('client_name');
      if (!brief.campaign_objective) missing.push('campaign_objective');
      if (!brief.budget?.total) missing.push('budget.total');
      if (!brief.geography?.length) missing.push('geography');
      
      const totalFields = 8;  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
      const filledFields = totalFields - missing.length;
      const completeness = Math.round((filledFields / totalFields) * 100);
      
      return { completeness, missing_fields: missing, errors };
    }
    
    if (artifactType === 'media_plan') {
      const plan = data as MediaPlanData;
      if (!plan.channels || plan.channels.length === 0) {
        missing.push('channels');
        return { completeness: 0, missing_fields: missing, errors };
      }
      
      let totalFields = plan.channels.length * 4;  // name, budget, formats, kpis
      let filledFields = 0;
      
      plan.channels.forEach((ch, idx) => {
        if (ch.name) filledFields++;
        if (ch.budget) filledFields++;
        if (ch.formats?.length) filledFields++;
        if (ch.kpis && Object.keys(ch.kpis).length > 0) filledFields++;
      });
      
      const completeness = Math.round((filledFields / totalFields) * 100);
      return { completeness, missing_fields: missing, errors };
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const hasData = Object.keys(data).length > 0;
    return {
      completeness: hasData ? 75 : 0,
      missing_fields: missing,
      errors,
    };
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  private generateInsights(
    artifactType: ArtifactType,
    data: any,
    validation: { completeness: number; missing_fields: string[] }
  ): { insights: string[]; recommendations: string[] } {
    console.log('üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤...');
    
    const insights: string[] = [];
    const recommendations: string[] = [];
    
    // –ò–Ω—Å–∞–π—Ç –æ –ø–æ–ª–Ω–æ—Ç–µ –¥–∞–Ω–Ω—ã—Ö
    if (validation.completeness >= 90) {
      insights.push(`‚úÖ –í—ã—Å–æ–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${validation.completeness}%`);
    } else if (validation.completeness >= 70) {
      insights.push(`‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${validation.completeness}%`);
      recommendations.push(`–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è: ${validation.missing_fields.join(', ')}`);
    } else {
      insights.push(`‚ùå –ù–∏–∑–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${validation.completeness}%`);
      recommendations.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å: ${validation.missing_fields.slice(0, 3).join(', ')}`);
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –ø–æ —Ç–∏–ø—É
    if (artifactType === 'media_plan') {
      const plan = data as MediaPlanData;
      if (plan.channels) {
        insights.push(`üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${plan.channels.length}`);
        
        const totalBudget = plan.channels.reduce((sum, ch) => sum + (ch.budget || 0), 0);
        insights.push(`üí∞ –û–±—â–∏–π –±—é–¥–∂–µ—Ç: ${totalBudget.toLocaleString('ru-RU')} ‚ÇΩ`);
        
        const topChannel = plan.channels.reduce((max, ch) => 
          (ch.budget || 0) > (max.budget || 0) ? ch : max
        );
        insights.push(`üèÜ –ö—Ä—É–ø–Ω–µ–π—à–∏–π –∫–∞–Ω–∞–ª: ${topChannel.name} (${((topChannel.budget || 0) / totalBudget * 100).toFixed(1)}%)`);
        
        recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç–æ–≤ —Ü–µ–ª—è–º –∫–∞–º–ø–∞–Ω–∏–∏');
        recommendations.push('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–º–µ—é—Ç KPI');
      }
    }
    
    if (artifactType === 'brief') {
      const brief = data as BriefData;
      if (brief.budget?.total) {
        insights.push(`üí∞ –ë—é–¥–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏: ${brief.budget.total.toLocaleString('ru-RU')} ${brief.budget.currency}`);
      }
      if (brief.geography) {
        insights.push(`üåç –†–µ–≥–∏–æ–Ω—ã: ${brief.geography.join(', ')}`);
      }
      
      recommendations.push('–°–æ–≥–ª–∞—Å—É–π—Ç–µ –±—Ä–∏—Ñ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      recommendations.push('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ KPI');
    }
    
    return { insights, recommendations };
  }
  
  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  private getFileType(fileName: string): string {
    const ext = fileName.split('.').pop()?.toLowerCase();
    return ext || 'unknown';
  }
  
  private parsePeriod(periodStr: string): { start?: string; end?: string } {
    const dates = periodStr.split('-').map(d => d.trim());
    return {
      start: dates[0] || undefined,
      end: dates[1] || undefined,
    };
  }
}

