/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 * 
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç
 */

import { ArtifactProcessor, ProcessingResult } from '../ai/artifact-processor';

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
const TEST_FILES = [
  // –ú–µ–¥–∏–∞–ø–ª–∞–Ω—ã
  '/Users/MGV/Documents/MRM/–û–†–ò–ì–ò–ù–ê–õ –ê–ø–µ–ª—å—Å–∏–Ω __ –¢–µ–Ω–¥–µ—Ä __ –ú–µ–¥–∏–∞–ø–ª–∞–Ω.xlsx',
  '/Users/MGV/Documents/MRM/–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ  –ê–ø—Ä–µ–ª—å 2024 –ì–ü–ë-–£–ê (–ê–ê–ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö–∞–ø–∏—Ç–∞–ª–æ–º).xlsx',
  '/Users/MGV/Documents/MRM/–ù–ù –ú–ü.xlsx',
  '/Users/MGV/Documents/MRM/b2c_–ú–µ–¥–∏–π–∫–∞_–º–æ–±–∏–ª–∫–∞_–º–∞—Ä—Ç2024.xlsx',
  '/Users/MGV/Documents/MRM/–ú–µ–¥–∏–∞–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä_–ü—Ä–∏–º–µ—Ä.xlsx',
  
  // –ë—Ä–∏—Ñ—ã –∏ –ø–∞—Å–ø–æ—Ä—Ç–∞
  '/Users/MGV/Documents/MRM/Clarins _ –ü–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞.xlsx',
  '/Users/MGV/Documents/MRM/Realweb_–†–µ–≥–ª–∞–º–µ–Ω—Ç_–∑–∞–ø—É—Å–∫–∞_–Ω–æ–≤–æ–≥–æ_–∫–ª–∏–µ–Ω—Ç–∞.xlsx',
  '/Users/MGV/Documents/MRM/Roadmap_L\'oreal.xlsx',
  
  // –û—Ç—á–µ—Ç—ã
  '/Users/MGV/Documents/MRM/Clarins_SEM_–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç_01.07.25-31.07.25.xlsx',
  '/Users/MGV/Documents/MRM/CaseGuru__–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç_29.09.xlsx',
  '/Users/MGV/Documents/MRM/REALWEB B2C __ Daily –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º.xlsx',
  
  // –î—Ä—É–≥–∏–µ
  '/Users/MGV/Documents/MRM/–£—á–µ—Ç_–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è_–∞—É–¥–∏—Ç–æ—Ä–∏–π (1).xlsx',
  '/Users/MGV/Documents/MRM/AI –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (3).xlsx',
];

/**
 * –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
interface TestReport {
  summary: {
    total_files: number;
    processed_successfully: number;
    failed: number;
    avg_processing_time_ms: number;
    avg_confidence: number;
    avg_completeness: number;
  };
  by_artifact_type: Record<string, {
    count: number;
    avg_confidence: number;
    avg_completeness: number;
  }>;
  results: ProcessingResult[];
  insights: string[];
  recommendations: string[];
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests(): Promise<TestReport> {
  console.log('=' .repeat(80));
  console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ê–†–¢–ï–§–ê–ö–¢–û–í');
  console.log('=' .repeat(80));
  console.log(`\nüìÅ –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${TEST_FILES.length}\n`);
  
  const processor = new ArtifactProcessor();
  const results: ProcessingResult[] = [];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  for (let i = 0; i < TEST_FILES.length; i++) {
    const filePath = TEST_FILES[i];
    console.log(`\n[${ i + 1}/${TEST_FILES.length}] ` + '‚îÄ'.repeat(60));
    
    try {
      const result = await processor.processFile(filePath);
      results.push(result);
      
      // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      console.log(`‚úÖ –¢–∏–ø: ${result.artifact_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(result.confidence * 100).toFixed(1)}%)`);
      console.log(`üìä –ü–æ–ª–Ω–æ—Ç–∞: ${result.completeness}%`);
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${result.processing_time_ms}ms`);
      
      if (result.insights.length > 0) {
        console.log(`üí° –ò–Ω—Å–∞–π—Ç—ã:`);
        result.insights.forEach(insight => console.log(`   ${insight}`));
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error}`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  const report = generateReport(results);
  
  return report;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
function generateReport(results: ProcessingResult[]): TestReport {
  console.log('\n' + '='.repeat(80));
  console.log('üìä –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–¢–ê');
  console.log('='.repeat(80));
  
  const successful = results.filter(r => r.artifact_type !== 'unknown');
  const failed = results.filter(r => r.artifact_type === 'unknown');
  
  const avgProcessingTime = results.reduce((sum, r) => sum + r.processing_time_ms, 0) / results.length;
  const avgConfidence = successful.reduce((sum, r) => sum + r.confidence, 0) / successful.length;
  const avgCompleteness = successful.reduce((sum, r) => sum + r.completeness, 0) / successful.length;
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
  const byType: Record<string, ProcessingResult[]> = {};
  results.forEach(r => {
    if (!byType[r.artifact_type]) {
      byType[r.artifact_type] = [];
    }
    byType[r.artifact_type].push(r);
  });
  
  const byArtifactType: Record<string, any> = {};
  Object.entries(byType).forEach(([type, items]) => {
    byArtifactType[type] = {
      count: items.length,
      avg_confidence: items.reduce((sum, r) => sum + r.confidence, 0) / items.length,
      avg_completeness: items.reduce((sum, r) => sum + r.completeness, 0) / items.length,
    };
  });
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
  const insights = generateOverallInsights(results, byArtifactType);
  const recommendations = generateOverallRecommendations(results, avgCompleteness, avgConfidence);
  
  return {
    summary: {
      total_files: results.length,
      processed_successfully: successful.length,
      failed: failed.length,
      avg_processing_time_ms: Math.round(avgProcessingTime),
      avg_confidence: avgConfidence,
      avg_completeness: Math.round(avgCompleteness),
    },
    by_artifact_type: byArtifactType,
    results,
    insights,
    recommendations,
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
 */
function generateOverallInsights(
  results: ProcessingResult[],
  byType: Record<string, any>
): string[] {
  const insights: string[] = [];
  
  const successRate = ((results.length - results.filter(r => r.artifact_type === 'unknown').length) / results.length * 100);
  insights.push(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successRate.toFixed(1)}% —Ñ–∞–π–ª–æ–≤`);
  
  const types = Object.keys(byType).filter(t => t !== 'unknown');
  insights.push(`üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–∏–ø–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${types.length} (${types.join(', ')})`);
  
  const mostCommon = Object.entries(byType)
    .filter(([type]) => type !== 'unknown')
    .sort((a, b) => b[1].count - a[1].count)[0];
  
  if (mostCommon) {
    insights.push(`üèÜ –°–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ç–∏–ø: ${mostCommon[0]} (${mostCommon[1].count} —Ñ–∞–π–ª–æ–≤)`);
  }
  
  const highConfidence = results.filter(r => r.confidence > 0.9).length;
  insights.push(`üéØ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>90%): ${highConfidence}/${results.length} —Ñ–∞–π–ª–æ–≤`);
  
  const highCompleteness = results.filter(r => r.completeness > 85).length;
  insights.push(`üìä –í—ã—Å–æ–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞ (>85%): ${highCompleteness}/${results.length} —Ñ–∞–π–ª–æ–≤`);
  
  return insights;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */
function generateOverallRecommendations(
  results: ProcessingResult[],
  avgCompleteness: number,
  avgConfidence: number
): string[] {
  const recommendations: string[] = [];
  
  if (avgConfidence < 0.85) {
    recommendations.push('‚ö†Ô∏è –£–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤');
  }
  
  if (avgCompleteness < 80) {
    recommendations.push('‚ö†Ô∏è –ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª–Ω–æ—Ç—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—É—â–∞—è: ' + avgCompleteness.toFixed(1) + '%)');
  }
  
  const unknownFiles = results.filter(r => r.artifact_type === 'unknown');
  if (unknownFiles.length > 0) {
    recommendations.push(`‚ùå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ${unknownFiles.length} –Ω–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`);
  }
  
  const lowCompleteness = results.filter(r => r.completeness < 70);
  if (lowCompleteness.length > 0) {
    recommendations.push(`‚ö†Ô∏è –£–ª—É—á—à–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è ${lowCompleteness.length} —Ñ–∞–π–ª–æ–≤ —Å –Ω–∏–∑–∫–æ–π –ø–æ–ª–Ω–æ—Ç–æ–π`);
  }
  
  recommendations.push('‚úÖ –°–æ–∑–¥–∞—Ç—å ground truth –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —Ñ–∞–π–ª–æ–≤');
  recommendations.push('‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä—É—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
  recommendations.push('‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏');
  
  return recommendations;
}

/**
 * –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function printReport(report: TestReport): void {
  console.log('\n' + '‚ïê'.repeat(80));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
  console.log('‚ïê'.repeat(80));
  
  console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('‚îÄ'.repeat(80));
  console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:           ${report.summary.total_files}`);
  console.log(`   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:     ${report.summary.processed_successfully} (${(report.summary.processed_successfully / report.summary.total_files * 100).toFixed(1)}%)`);
  console.log(`   –û—à–∏–±–æ–∫:                 ${report.summary.failed}`);
  console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:          ${report.summary.avg_processing_time_ms}ms`);
  console.log(`   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:    ${(report.summary.avg_confidence * 100).toFixed(1)}%`);
  console.log(`   –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞:        ${report.summary.avg_completeness}%`);
  
  console.log('\nüìã –ü–û –¢–ò–ü–ê–ú –ê–†–¢–ï–§–ê–ö–¢–û–í:');
  console.log('‚îÄ'.repeat(80));
  Object.entries(report.by_artifact_type).forEach(([type, stats]) => {
    console.log(`\n   ${type.toUpperCase()}:`);
    console.log(`      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:         ${stats.count}`);
    console.log(`      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:        ${(stats.avg_confidence * 100).toFixed(1)}%`);
    console.log(`      –ü–æ–ª–Ω–æ—Ç–∞:            ${stats.avg_completeness.toFixed(1)}%`);
  });
  
  console.log('\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:');
  console.log('‚îÄ'.repeat(80));
  report.insights.forEach(insight => {
    console.log(`   ${insight}`);
  });
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('‚îÄ'.repeat(80));
  report.recommendations.forEach((rec, idx) => {
    console.log(`   ${idx + 1}. ${rec}`);
  });
  
  console.log('\n' + '‚ïê'.repeat(80));
  console.log('‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('‚ïê'.repeat(80));
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
 */
function saveReportToFile(report: TestReport): string {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const fileName = `/Users/MGV/Documents/MRM/_ARTIFACT_PROCESSING_TEST_REPORT_${timestamp}.json`;
  
  const fs = require('fs');
  fs.writeFileSync(fileName, JSON.stringify(report, null, 2), 'utf-8');
  
  console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fileName}`);
  
  return fileName;
}

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
 */
async function main() {
  try {
    const report = await runTests();
    printReport(report);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
    const reportFile = saveReportToFile(report);
    
    // –°–æ–∑–¥–∞–µ–º Markdown –æ—Ç—á–µ—Ç
    const mdReport = generateMarkdownReport(report);
    const fs = require('fs');
    const mdFileName = reportFile.replace('.json', '.md');
    fs.writeFileSync(mdFileName, mdReport, 'utf-8');
    console.log(`üìù Markdown –æ—Ç—á–µ—Ç: ${mdFileName}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –æ—Ç—á–µ—Ç–∞
 */
function generateMarkdownReport(report: TestReport): string {
  const date = new Date().toLocaleDateString('ru-RU');
  const time = new Date().toLocaleTimeString('ru-RU');
  
  let md = `# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤\n\n`;
  md += `**–î–∞—Ç–∞:** ${date} ${time}\n\n`;
  md += `**–§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** ${report.summary.total_files}\n\n`;
  md += `---\n\n`;
  
  md += `## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`;
  md += `| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |\n`;
  md += `|---------|----------|\n`;
  md += `| –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ | ${report.summary.total_files} |\n`;
  md += `| –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ | ${report.summary.processed_successfully} (${(report.summary.processed_successfully / report.summary.total_files * 100).toFixed(1)}%) |\n`;
  md += `| –û—à–∏–±–æ–∫ | ${report.summary.failed} |\n`;
  md += `| –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ | ${report.summary.avg_processing_time_ms}ms |\n`;
  md += `| –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å | ${(report.summary.avg_confidence * 100).toFixed(1)}% |\n`;
  md += `| –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö | ${report.summary.avg_completeness}% |\n\n`;
  
  md += `## üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤\n\n`;
  md += `| –¢–∏–ø | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å | –ü–æ–ª–Ω–æ—Ç–∞ |\n`;
  md += `|-----|------------|-------------|----------|\n`;
  Object.entries(report.by_artifact_type).forEach(([type, stats]) => {
    md += `| ${type} | ${stats.count} | ${(stats.avg_confidence * 100).toFixed(1)}% | ${stats.avg_completeness.toFixed(1)}% |\n`;
  });
  md += `\n`;
  
  md += `## üí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã\n\n`;
  report.insights.forEach(insight => {
    md += `- ${insight}\n`;
  });
  md += `\n`;
  
  md += `## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n`;
  report.recommendations.forEach((rec, idx) => {
    md += `${idx + 1}. ${rec}\n`;
  });
  md += `\n`;
  
  md += `## üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n`;
  report.results.forEach((result, idx) => {
    md += `### ${idx + 1}. ${result.file_name}\n\n`;
    md += `- **–¢–∏–ø:** ${result.artifact_type}\n`;
    md += `- **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** ${(result.confidence * 100).toFixed(1)}%\n`;
    md += `- **–ü–æ–ª–Ω–æ—Ç–∞:** ${result.completeness}%\n`;
    md += `- **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ${result.processing_time_ms}ms\n`;
    
    if (result.missing_fields.length > 0) {
      md += `- **–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ–ª—è:** ${result.missing_fields.join(', ')}\n`;
    }
    
    if (result.insights.length > 0) {
      md += `\n**–ò–Ω—Å–∞–π—Ç—ã:**\n`;
      result.insights.forEach(insight => {
        md += `- ${insight}\n`;
      });
    }
    
    if (result.recommendations.length > 0) {
      md += `\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`;
      result.recommendations.forEach(rec => {
        md += `- ${rec}\n`;
      });
    }
    
    md += `\n`;
  });
  
  md += `---\n\n`;
  md += `**–°—Ç–∞—Ç—É—Å:** ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n`;
  
  return md;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  main();
}

export { runTests, TestReport };

